services:
  app:
    build: .
    command: ./app
    container_name: image-processor
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_started
      kafka:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    env_file:
      - .env
    networks:
      - app-network

  migrator:
    image: kukymbr/goose-docker:3.24.2
    container_name: migrator
    command: up
    depends_on:
      db:
        condition: service_healthy
    environment:
      - GOOSE_DRIVER=${GOOSE_DRIVER}
      - GOOSE_DBSTRING=host=${DB_HOST} port=${DB_PORT} user=${DB_USER} password=${DB_PASSWORD} dbname=${DB_NAME}
      - GOOSE_MIGRATION_DIR=${GOOSE_MIGRATION_DIR}
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "sh", "-c", "exit 0" ]
      interval: 5s
      timeout: 3s
      retries: 1
    volumes:
      - ./migrations:/migrations
    networks:
      - app-network

  db:
    image: postgres
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    env_file:
      - .env
    ports:
      - "5434:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  kafka: 
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_CLUSTER_ID: sz5Woq_TRNSbo-pElZnJ6Q
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,CONTROLLER://kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 10000
    volumes:
      - kafka:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  kafka-init:
    image: apache/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ "bash", "-c" ]
    command: |
      "
      echo 'Waiting for Kafka to be ready...';
      until /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1; do
        sleep 5;
      done;
      echo 'Creating topic my-topic';
      /opt/kafka/bin/kafka-topics.sh --create --topic images --partitions 1 --replication-factor 1 --bootstrap-server kafka:9092;
      echo 'Topic created, exiting...';
      exit 0
      "
    networks:
      - app-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/var/lib/minio
    networks:
      - app-network

volumes:
  postgres_data:
  minio_data:
  kafka:

networks:
  app-network: